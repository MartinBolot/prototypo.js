define(['./Classify.js'], function($__0) {
  "use strict";
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var Classify = $__0.default;
  function Point(x, y) {
    Classify.prototype.constructor.call(this);
    if (x === undefined || x === null) {
      this.coords = new Float32Array([x, y]);
    } else if (x.constructor === Array || x.constructor === Float32Array) {
      this.coords = new Float32Array(x);
    } else if (typeof x === 'object' && ('x' in x || 'y' in x)) {
      this.coords = new Float32Array([x.x, x.y]);
    } else {
      this.coords = new Float32Array([x, y]);
    }
  }
  Point.prototype = Object.create(Classify.prototype);
  Point.prototype.constructor = Point;
  Object.mixin(Point.prototype, {
    get x() {
      return this.coords[0];
    },
    set x(x) {
      this.coords[0] = x;
    },
    get y() {
      return this.coords[1];
    },
    set y(y) {
      this.coords[1] = y;
    },
    set: function(x, y) {
      this.coords[0] = x;
      this.coords[1] = y;
    },
    transform: function(m) {
      var coords0 = this.coords[0];
      this.coords[0] = m[0] * coords0 + m[2] * this.coords[1] + m[4];
      this.coords[1] = m[1] * coords0 + m[3] * this.coords[1] + m[5];
      return this;
    },
    toString: function() {
      return (isNaN(this.coords[0]) ? 'NaN' : Math.round(this.coords[0])) + ' ' + (isNaN(this.coords[1]) ? 'NaN' : Math.round(this.coords[1]));
    },
    toJSON: function() {
      return this.toString();
    },
    _: function(x, y) {
      if (x === undefined || x === null) {
        this.coords[0] = x;
        this.coords[1] = y;
      } else if (x.constructor === Array || x.constructor === Float32Array) {
        this.coords[0] = x[0];
        this.coords[1] = x[1];
      } else if (typeof x === 'object' && ('x' in x || 'y' in x)) {
        this.coords[0] = x.x;
        this.coords[1] = x.y;
      } else {
        this.coords[0] = x;
        this.coords[1] = y;
      }
      return this;
    },
    translate: function(x, y) {
      var p = x instanceof Point ? x : new Point(x, y);
      if (!isNaN(p.coords[0])) {
        this.coords[0] += p.coords[0];
      }
      if (!isNaN(p.coords[1])) {
        this.coords[1] += p.coords[1];
      }
      return this;
    },
    translateX: function(x) {
      this.coords[0] += x;
      return this;
    },
    translateY: function(y) {
      this.coords[1] += y;
      return this;
    }
  });
  Point.prototype.onLine = function(knownCoord, p1, p2) {
    var origin = p1,
        vector = [p2.x - p1.x, p2.y - p1.y];
    if (knownCoord === 'x') {
      this.coords[1] = (this.coords[0] - origin.x) / vector[0] * vector[1] + origin.y;
    } else {
      this.coords[0] = (this.coords[1] - origin.y) / vector[1] * vector[0] + origin.x;
    }
  };
  var $__default = Point;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci82IiwiY2xhc3Nlcy9Qb2ludC5qcyIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci81IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzQiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMCIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8zIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzEiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxLQUFLLEFBQUMsRUNBZSxlQUFjLEVDQW5DLFVBQVMsSUFBZ0I7O0FDQXpCLEtBQUksS0FBaUIsR0FBSyxFQUFDLGVBQTJCO0FBQzFDLFNBQW9CLEVBQUMsT0FBTSxNQUFtQixDQUFDLENBQUE7QUFBQSxJRkRwRCxTQUFPO0FBRWQsU0FBUyxNQUFJLENBQUcsQ0FBQSxDQUFHLENBQUEsQ0FBQSxDQUFJO0FBQ3RCLFdBQU8sVUFBVSxZQUFZLEtBQUssQUFBQyxDQUFFLElBQUcsQ0FBRSxDQUFDO0FBRTNDLE9BQUssQ0FBQSxJQUFNLFVBQVEsQ0FBQSxFQUFLLENBQUEsQ0FBQSxJQUFNLEtBQUcsQ0FBSTtBQUNwQyxTQUFHLE9BQU8sRUFBSSxJQUFJLGFBQVcsQUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFHLEVBQUEsQ0FBQyxDQUFDLENBQUM7SUFFdkMsS0FBTyxLQUFLLENBQUEsWUFBWSxJQUFNLE1BQUksQ0FBQSxFQUFLLENBQUEsQ0FBQSxZQUFZLElBQU0sYUFBVyxDQUFJO0FBQ3ZFLFNBQUcsT0FBTyxFQUFJLElBQUksYUFBVyxBQUFDLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFbEMsS0FBTyxLQUFLLE1BQU8sRUFBQSxDQUFBLEdBQU0sU0FBTyxDQUFBLEVBQUssRUFBRSxHQUFFLEdBQUssRUFBQSxD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QUFBLE1BQUssRUFBRSxDQUFDO0lBQ2xGLEtBQU87QUFDTixTQUFHLE9BQU8sQ0FBRSxDQUFBLENBQUMsRUFBSSxDQUFBLENBQUUsSUFBRyxPQUFPLENBQUUsQ0FBQSxDQUFDLEVBQUksQ0FBQSxNQUFLLEVBQUUsQ0FBRSxFQUFJLENBQUEsTUFBSyxDQUFFLENBQUEsQ0FBQyxDQUFBLENBQUksQ0FBQSxNQUFLLENBQUUsQ0FBQSxDQUFDLENBQUEsQ0FBSSxDQUFBLE1BQUssRUFBRSxDQUFDO0lBQ2xGO0FBQUEsRUFDRCxDQUFDO0FHL0hELEFBQUksSUFBQSxDQUFBLFVBQVMsRUhpSUUsTUdqSWtCLEFIaUlkLENHakljO0FDQWpDO0FDQUEsZ0JBQXdCO0FBQUUsdUJBQXdCO0lBQUU7QUNBcEQsYUFBUyxDQUFHLEtBQUc7QUFBQSxHRkFRO0FIRW5CLENGRnVDLENBQUM7QUNvT3hDIiwiZmlsZSI6ImNsYXNzZXMvUG9pbnQuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoJF9fcGxhY2Vob2xkZXJfXzAsICRfX3BsYWNlaG9sZGVyX18xKTsiLCJpbXBvcnQgQ2xhc3NpZnkgZnJvbSAnLi9DbGFzc2lmeS5qcyc7XG5cbmZ1bmN0aW9uIFBvaW50KCB4LCB5ICkge1xuXHRDbGFzc2lmeS5wcm90b3R5cGUuY29uc3RydWN0b3IuY2FsbCggdGhpcyApO1xuXG5cdGlmICggeCA9PT0gdW5kZWZpbmVkIHx8wqB4ID09PSBudWxsICkge1xuXHRcdHRoaXMuY29vcmRzID0gbmV3IEZsb2F0MzJBcnJheShbeCwgeV0pO1xuXG5cdH0gZWxzZSBpZiAoIHguY29uc3RydWN0b3IgPT09IEFycmF5IHx8IHguY29uc3RydWN0b3IgPT09IEZsb2F0MzJBcnJheSApIHtcblx0XHR0aGlzLmNvb3JkcyA9IG5ldyBGbG9hdDMyQXJyYXkoeCk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIHggPT09ICdvYmplY3QnICYmICggJ3gnIGluIHggfHwgJ3knIGluIHggKSApIHtcblx0XHR0aGlzLmNvb3JkcyA9IG5ldyBGbG9hdDMyQXJyYXkoW3gueCwgeC55XSk7XG5cblx0fSBlbHNlIHtcblx0XHR0aGlzLmNvb3JkcyA9IG5ldyBGbG9hdDMyQXJyYXkoW3gsIHldKTtcblxuXHR9XG59XG5cblBvaW50LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3NpZnkucHJvdG90eXBlKTtcblBvaW50LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvaW50O1xuXG5PYmplY3QubWl4aW4oUG9pbnQucHJvdG90eXBlLCB7XG5cblx0Ly8gLnggYW5kIC55IGFyZSBtb3JlIGNvbnZlbmllbnQgdGhhbiAuY29vcmRzWzBdIGFuZCAuY29vcmRzWzFdXG5cdGdldCB4KCkge1xuXHRcdHJldHVybiB0aGlzLmNvb3Jkc1swXTtcblx0fSxcblx0c2V0IHgoIHggKSB7XG5cdFx0dGhpcy5jb29yZHNbMF0gPSB4O1xuXHR9LFxuXHRnZXQgeSgpIHtcblx0XHRyZXR1cm4gdGhpcy5jb29yZHNbMV07XG5cdH0sXG5cdHNldCB5KCB5ICkge1xuXHRcdHRoaXMuY29vcmRzWzFdID0geTtcblx0fSxcblxuXHRzZXQoeCwgeSkge1xuXHRcdHRoaXMuY29vcmRzWzBdID0geDtcblx0XHR0aGlzLmNvb3Jkc1sxXSA9IHk7XG5cdH0sXG5cblx0dHJhbnNmb3JtKCBtICkge1xuXHRcdHZhciBjb29yZHMwID0gdGhpcy5jb29yZHNbMF07XG5cdFx0dGhpcy5jb29yZHNbMF0gPSBtWzBdICogY29vcmRzMCArIG1bMl0gKiB0aGlzLmNvb3Jkc1sxXSArIG1bNF07XG5cdFx0dGhpcy5jb29yZHNbMV0gPSBtWzFdICogY29vcmRzMCArIG1bM10gKiB0aGlzLmNvb3Jkc1sxXSArIG1bNV07XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gKCBpc05hTiggdGhpcy5jb29yZHNbMF0gKSA/ICdOYU4nIDogTWF0aC5yb3VuZCggdGhpcy5jb29yZHNbMF0gKSApICtcblx0XHRcdCcgJyArXG5cdFx0XHQoIGlzTmFOKCB0aGlzLmNvb3Jkc1sxXSApID8gJ05hTicgOiBNYXRoLnJvdW5kKCB0aGlzLmNvb3Jkc1sxXSApICk7XG5cdH0sXG5cblx0dG9KU09OKCkge1xuXHRcdHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG5cdH0sXG5cblxuXG5cdC8vIFRoZSBmb2xsb3dpbmcgbWV0aG9kcyBhcmUgZGVwcmVjYXRlZFxuXG5cdC8vIGEgc2V0dGVyIGZvciB4L3kgY29vcmRpbmF0ZXMgdGhhdCBiZWhhdmVzIGV4YWN0bHkgbGlrZSB0aGUgY29uc3RydWN0b3Jcblx0Xyh4LCB5KSB7XG5cdFx0aWYgKCB4ID09PSB1bmRlZmluZWQgfHzCoHggPT09IG51bGwgKSB7XG5cdFx0XHR0aGlzLmNvb3Jkc1swXSA9IHg7XG5cdFx0XHR0aGlzLmNvb3Jkc1sxXSA9IHk7XG5cblx0XHR9IGVsc2UgaWYgKCB4LmNvbnN0cnVjdG9yID09PSBBcnJheSB8fCB4LmNvbnN0cnVjdG9yID09PSBGbG9hdDMyQXJyYXkgKSB7XG5cdFx0XHR0aGlzLmNvb3Jkc1swXSA9IHhbMF07XG5cdFx0XHR0aGlzLmNvb3Jkc1sxXSA9IHhbMV07XG5cblx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgeCA9PT0gJ29iamVjdCcgJiYgKCAneCcgaW4geCB8fCAneScgaW4geCApICkge1xuXHRcdFx0dGhpcy5jb29yZHNbMF0gPSB4Lng7XG5cdFx0XHR0aGlzLmNvb3Jkc1sxXSA9IHgueTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmNvb3Jkc1swXSA9IHg7XG5cdFx0XHR0aGlzLmNvb3Jkc1sxXSA9IHk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0cmFuc2xhdGUoIHgsIHkgKSB7XG5cdFx0dmFyIHAgPSB4IGluc3RhbmNlb2YgUG9pbnQgP1xuXHRcdFx0XHR4OlxuXHRcdFx0XHRuZXcgUG9pbnQoIHgsIHkgKTtcblxuXHRcdGlmICggIWlzTmFOKCBwLmNvb3Jkc1swXSApICkge1xuXHRcdFx0dGhpcy5jb29yZHNbMF0gKz0gcC5jb29yZHNbMF07XG5cdFx0fVxuXHRcdGlmICggIWlzTmFOKCBwLmNvb3Jkc1sxXSApICkge1xuXHRcdFx0dGhpcy5jb29yZHNbMV0gKz0gcC5jb29yZHNbMV07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dHJhbnNsYXRlWCggeCApIHtcblx0XHR0aGlzLmNvb3Jkc1swXSArPSB4O1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRyYW5zbGF0ZVkoIHkgKSB7XG5cdFx0dGhpcy5jb29yZHNbMV0gKz0geTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSk7XG5cblBvaW50LnByb3RvdHlwZS5vbkxpbmUgPSBmdW5jdGlvbigga25vd25Db29yZCwgcDEsIHAyICkge1xuXHR2YXIgb3JpZ2luID0gcDEsXG5cdFx0dmVjdG9yID0gW1xuXHRcdFx0cDIueCAtIHAxLngsXG5cdFx0XHRwMi55IC0gcDEueVxuXHRcdF07XG5cblx0aWYgKCBrbm93bkNvb3JkID09PSAneCcgKSB7XG5cdFx0dGhpcy5jb29yZHNbMV0gPSAoIHRoaXMuY29vcmRzWzBdIC0gb3JpZ2luLnggKSAvIHZlY3RvclswXSAqIHZlY3RvclsxXSArIG9yaWdpbi55O1xuXHR9IGVsc2Uge1xuXHRcdHRoaXMuY29vcmRzWzBdID0gKCB0aGlzLmNvb3Jkc1sxXSAtIG9yaWdpbi55ICkgLyB2ZWN0b3JbMV0gKiB2ZWN0b3JbMF0gKyBvcmlnaW4ueDtcblx0fVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUG9pbnQ7XG5cblx0Ly8gXHRyZXR1cm4gUG9pbnQ7XG5cdC8vIH0pO1xuXG5cdC8vIHNvbWUgZnVuY3Rpb25zIG5lZWQgdG8gYmUgYWRkZWQgdG8gdGhlIHByb3RvdHlwZSBhdCBydW50aW1lIHRvIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY3lcblx0LyoucnVuKGZ1bmN0aW9uKFBvaW50LCBwb2ludE9uKSB7XG5cdFx0UG9pbnQucHJvdG90eXBlLm9uID0gcG9pbnRPbjtcblx0fSlcblxuXHQuZmFjdG9yeSgncG9pbnRPbicsIGZ1bmN0aW9uKCBQb2ludCwgbGluZUxpbmVJbnRlcnNlY3Rpb24gKSB7XG5cdFx0Ly8gdGhpcyByZWdleHAgaXMgZHVwbGljYXRlZCBpbiBTZWdtZW50LmpzXG5cdFx0dmFyIHJzdHJhaWdodCA9IC9bTFZNSF0vO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCBhcmdzICkge1xuXHRcdFx0dmFyIG9yaWdpbixcblx0XHRcdFx0dmVjdG9yO1xuXG5cdFx0XHQvLyBoYW5kbGUgY2FzZXMgd2hlcmUgYXJncyByZWZlcnMgdG8gdW5kZWZpbmVkIGRhdGFcblx0XHRcdGlmICggYXJncyA9PT0gdW5kZWZpbmVkIHx8ICggYXJncy5jb25zdHJ1Y3RvciA9PT0gQXJyYXkgJiYgKCBhcmdzWzBdID09PSB1bmRlZmluZWQgfHwgYXJnc1sxXSA9PT0gdW5kZWZpbmVkICkgKSApIHtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHBvaW50IG9uIGEgc2VnbWVudFxuXHRcdFx0aWYgKCAhaXNOYU4oIHRoaXMuY29vcmRzWzBdICkgfHwgIWlzTmFOKCB0aGlzLmNvb3Jkc1sxXSApICkge1xuXG5cdFx0XHRcdC8vIHBvaW50IG9uIGEgc3RyYWlnaHQgbGluZVxuXHRcdFx0XHRpZiAoICggYXJncy5jb21tYW5kICE9PSB1bmRlZmluZWQgJiYgcnN0cmFpZ2h0LnRlc3QoYXJncy5jb21tYW5kKSApIHx8XG5cdFx0XHRcdFx0YXJncy5jb25zdHJ1Y3RvciA9PT0gQXJyYXkgKSB7XG5cdFx0XHRcdFx0Ly8gc2VnbWVudCBmcm9tIHR3byBwb2ludHNcblx0XHRcdFx0XHRpZiAoIGFyZ3MuY29uc3RydWN0b3IgPT09IEFycmF5ICkge1xuXHRcdFx0XHRcdFx0b3JpZ2luID0gYXJnc1swXTtcblx0XHRcdFx0XHRcdHZlY3RvciA9IFtcblx0XHRcdFx0XHRcdFx0YXJnc1sxXS54IC0gYXJnc1swXS54LFxuXHRcdFx0XHRcdFx0XHRhcmdzWzFdLnkgLSBhcmdzWzBdLnlcblx0XHRcdFx0XHRcdF07XG5cblx0XHRcdFx0XHQvLyBTZWdtZW50IGluc3RhbmNlXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdG9yaWdpbiA9IGFyZ3Muc3RhcnQ7XG5cdFx0XHRcdFx0XHR2ZWN0b3IgPSBbXG5cdFx0XHRcdFx0XHRcdGFyZ3MuZW5kLnggLSBhcmdzLnN0YXJ0LngsXG5cdFx0XHRcdFx0XHRcdGFyZ3MuZW5kLnkgLSBhcmdzLnN0YXJ0Lnlcblx0XHRcdFx0XHRcdF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLmNvb3Jkc1swXSApIHtcblx0XHRcdFx0XHRcdHRoaXMuY29vcmRzWzFdID0gKCB0aGlzLmNvb3Jkc1swXSAtIG9yaWdpbi54ICkgLyB2ZWN0b3JbMF0gKiB2ZWN0b3JbMV0gKyBvcmlnaW4ueTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5jb29yZHNbMF0gPSAoIHRoaXMuY29vcmRzWzFdIC0gb3JpZ2luLnkgKSAvIHZlY3RvclsxXSAqIHZlY3RvclswXSArIG9yaWdpbi54O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIHBvaW50IG9uIGEgY3VydmVcblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIGludGVyc2VjdGlvblxuXHRcdFx0fSBlbHNlIGlmICggYXJncy5jb25zdHJ1Y3RvciA9PT0gQXJyYXkgJiYgYXJncy5sZW5ndGggPT09IDIgKSB7XG5cblx0XHRcdFx0Ly8gbGluZS1saW5lIGludGVyc2VjdGlvblxuXHRcdFx0XHRpZiAoXHQoIGFyZ3NbMF0uY29uc3RydWN0b3IgPT09IEFycmF5IHx8IHJzdHJhaWdodC50ZXN0KGFyZ3NbMF0uY29tbWFuZCkgKSAmJlxuXHRcdFx0XHRcdFx0KCBhcmdzWzFdLmNvbnN0cnVjdG9yID09PSBBcnJheSB8fCByc3RyYWlnaHQudGVzdChhcmdzWzFdLmNvbW1hbmQpICkgKSB7XG5cblx0XHRcdFx0XHR2YXIgcDEgPSBhcmdzWzBdLmNvbnN0cnVjdG9yID09PSBBcnJheSA/XG5cdFx0XHRcdFx0XHRcdCggYXJnc1swXVswXSBpbnN0YW5jZW9mIFBvaW50ID9cblx0XHRcdFx0XHRcdFx0XHRhcmdzWzBdWzBdOlxuXHRcdFx0XHRcdFx0XHRcdG5ldyBQb2ludCggYXJnc1swXVswXSApICk6XG5cdFx0XHRcdFx0XHRcdGFyZ3NbMF0uc3RhcnQsXG5cdFx0XHRcdFx0XHRwMiA9IGFyZ3NbMF0uY29uc3RydWN0b3IgPT09IEFycmF5ID9cblx0XHRcdFx0XHRcdFx0KCBhcmdzWzBdWzFdIGluc3RhbmNlb2YgUG9pbnQgP1xuXHRcdFx0XHRcdFx0XHRcdGFyZ3NbMF1bMV06XG5cdFx0XHRcdFx0XHRcdFx0bmV3IFBvaW50KCBhcmdzWzBdWzFdICkgKTpcblx0XHRcdFx0XHRcdFx0YXJnc1swXS5lbmQsXG5cdFx0XHRcdFx0XHRwMyA9IGFyZ3NbMV0uY29uc3RydWN0b3IgPT09IEFycmF5ID9cblx0XHRcdFx0XHRcdFx0KCBhcmdzWzFdWzBdIGluc3RhbmNlb2YgUG9pbnQgP1xuXHRcdFx0XHRcdFx0XHRcdGFyZ3NbMV1bMF06XG5cdFx0XHRcdFx0XHRcdFx0bmV3IFBvaW50KCBhcmdzWzFdWzBdICkgKTpcblx0XHRcdFx0XHRcdFx0YXJnc1sxXS5zdGFydCxcblx0XHRcdFx0XHRcdHA0ID0gYXJnc1sxXS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkgP1xuXHRcdFx0XHRcdFx0XHQoIGFyZ3NbMV1bMV0gaW5zdGFuY2VvZiBQb2ludCA/XG5cdFx0XHRcdFx0XHRcdFx0YXJnc1sxXVsxXTpcblx0XHRcdFx0XHRcdFx0XHRuZXcgUG9pbnQoIGFyZ3NbMV1bMV0gKSApOlxuXHRcdFx0XHRcdFx0XHRhcmdzWzFdLmVuZDtcblxuXHRcdFx0XHRcdHJldHVybiB0aGlzLl8oIGxpbmVMaW5lSW50ZXJzZWN0aW9uKCBwMSwgcDIsIHAzLCBwNCApICk7XG5cblx0XHRcdFx0Ly8gY3VydmUtY3VydmUgaW50ZXJzZWN0aW9uXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGFyZ3NbMF0uY29tbWFuZCA9PT0gJ0MnICYmIGFyZ3NbMV0uY29tbWFuZCA9PT0gJ0MnICkge1xuXG5cdFx0XHRcdC8vIGxpbmUtY3VydmUgb3IgY3VydmUtbGluZSBpbnRlcnNlY3Rpb25cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblx0XHR9O1xuXHR9KSovIiwiZnVuY3Rpb24oJF9fcGxhY2Vob2xkZXJfXzApIHtcbiAgICAgICRfX3BsYWNlaG9sZGVyX18xXG4gICAgfSIsImlmICghJF9fcGxhY2Vob2xkZXJfXzAgfHwgISRfX3BsYWNlaG9sZGVyX18xLl9fZXNNb2R1bGUpXG4gICAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMiA9IHtkZWZhdWx0OiAkX19wbGFjZWhvbGRlcl9fM30iLCJ2YXIgJF9fZGVmYXVsdCA9ICRfX3BsYWNlaG9sZGVyX18wIiwicmV0dXJuICRfX3BsYWNlaG9sZGVyX18wIiwiZ2V0ICRfX3BsYWNlaG9sZGVyX18wKCkgeyByZXR1cm4gJF9fcGxhY2Vob2xkZXJfXzE7IH0iLCJfX2VzTW9kdWxlOiB0cnVlIl19