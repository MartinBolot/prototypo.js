define([], function() {
  "use strict";
  var Point = function Point(x, y) {
    if (!(this instanceof $Point)) {
      return new $Point(x, y);
    }
    if (x === undefined || x === null) {
      this.coords = new Float32Array([x, y]);
    } else if (x.constructor === Array || x.constructor === Float32Array) {
      this.coords = new Float32Array(x);
    } else if (typeof x === 'object' && ('x' in x || 'y' in x)) {
      this.coords = new Float32Array([x.x, x.y]);
    } else {
      this.coords = new Float32Array([x, y]);
    }
  };
  var $Point = Point;
  ($traceurRuntime.createClass)(Point, {
    get x() {
      return this.coords[0];
    },
    set x(x) {
      this.coords[0] = x;
    },
    get y() {
      return this.coords[1];
    },
    set y(y) {
      this.coords[1] = y;
    },
    _: function(x, y) {
      if (x === undefined || x === null) {
        this.coords[0] = x;
        this.coords[1] = y;
      } else if (x.constructor === Array || x.constructor === Float32Array) {
        this.coords[0] = x[0];
        this.coords[1] = x[1];
      } else if (typeof x === 'object' && ('x' in x || 'y' in x)) {
        this.coords[0] = x.x;
        this.coords[1] = x.y;
      } else {
        this.coords[0] = x;
        this.coords[1] = y;
      }
      return this;
    },
    translate: function(x, y) {
      var p = x instanceof $Point ? x : new $Point(x, y);
      if (!isNaN(p.coords[0])) {
        this.coords[0] += p.coords[0];
      }
      if (!isNaN(p.coords[1])) {
        this.coords[1] += p.coords[1];
      }
      return this;
    },
    translateX: function(x) {
      this.coords[0] += x;
      return this;
    },
    translateY: function(y) {
      this.coords[1] += y;
      return this;
    },
    transform: function(m, isRecursive) {
      var coords0 = this.coords[0];
      if (m.constructor === Float32Array) {
        this.coords[0] = m[0] * coords0 + m[2] * this.coords[1] + m[4];
        this.coords[1] = m[1] * coords0 + m[3] * this.coords[1] + m[5];
      } else {
        this.coords[0] = m.a * coords0 + m.c * this.coords[1] + m.e;
        this.coords[1] = m.b * coords0 + m.d * this.coords[1] + m.f;
      }
      if (isRecursive && this.children) {
        this.children.forEach((function(child) {
          return child.transform(m, isRecursive);
        }));
      }
      return this;
    },
    toString: function() {
      return (isNaN(this.coords[0]) ? 'NaN' : Math.round(this.coords[0])) + ' ' + (isNaN(this.coords[1]) ? 'NaN' : Math.round(this.coords[1]));
    },
    toJSON: function() {
      return this.toString();
    }
  }, {});
  var $__default = Point;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

//# sourceMappingURL=data:application/json;base64,