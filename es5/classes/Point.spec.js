define(['./Point.js'], function($__0) {
  "use strict";
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var Point = $__0.default;
  describe('Point structure', function() {
    var _Point,
        p0,
        p1,
        p2,
        p3,
        p4,
        p5,
        p6;
    beforeEach(function() {
      _Point = Point;
      p0 = new Point(3, 6);
      p1 = Point(2, 5);
      p2 = Point([2, 5]);
      p3 = Point('2', '5');
      p4 = Point(['2', '5']);
      p5 = Point(p1);
      p6 = Point({
        x: 2,
        y: 5
      });
    });
    it('can be called with or without new', function() {
      expect(p0 instanceof _Point).to.be.true;
      expect(p1 instanceof _Point).to.be.true;
    });
    it('accepts two args: x and y', function() {
      expect(p0.x).to.equal(3);
      expect(p0.y).to.equal(6);
      expect(p1.x).to.equal(2);
      expect(p1.y).to.equal(5);
    });
    it('accepts an array arg: [x,y]', function() {
      expect(p2.x).to.equal(2);
      expect(p2.y).to.equal(5);
    });
    it('accepts an object arg: {x:x,y:y}', function() {
      expect(p6.x).to.equal(2);
      expect(p6.y).to.equal(5);
    });
    it('accepts number and string args and turns them into numbers', function() {
      expect(p3.x).to.be.a('number');
      expect(p4.x).to.be.a('number');
    });
    it('can be serialized', function() {
      expect(p1 + '').to.equal('2 5');
    });
    it('accepts a Point as an argument, and this results in an independent clone', function() {
      p1.x = 4;
      p1.y = 7;
      expect(p5.x).to.equal(2);
      expect(p5.y).to.equal(5);
    });
    it('accepts undefined parameters', function() {
      var p1 = Point(undefined, 5);
      expect(p1.x).to.deep.equal(NaN);
      expect(p1.y).to.equal(5);
      var p2 = Point(2, undefined);
      expect(p2.y).to.deep.equal(NaN);
      expect(p2.x).to.equal(2);
      var p3 = Point([undefined, 5]);
      expect(p3.x).to.deep.equal(NaN);
      expect(p3.y).to.equal(5);
      var p4 = Point([2, undefined]);
      expect(p4.y).to.deep.equal(NaN);
      expect(p4.x).to.equal(2);
      var p5 = Point({y: 5});
      expect(p5.x).to.deep.equal(NaN);
      expect(p5.y).to.equal(5);
      var p6 = Point({x: 2});
      expect(p6.y).to.deep.equal(NaN);
      expect(p6.x).to.equal(2);
    });
  });
  describe('translatePoint', function() {
    var _Point,
        p0,
        p1,
        p2,
        p3,
        p4,
        p5,
        p6;
    beforeEach(function() {
      _Point = Point;
      p0 = new Point(3, 6);
      p1 = Point(2, 5);
      p2 = Point([2, 5]);
      p3 = Point('2', '5');
      p4 = Point(['2', '5']);
      p5 = Point(p1);
      p6 = Point({
        x: 2,
        y: 5
      });
    });
    it('can translate a Point on x axis', function() {
      var p1 = Point(2, 5);
      p1.translateX(4);
      expect(p1.x).to.equal(6);
    });
    it('can translate a Point on y axis', function() {
      var p1 = Point(2, 5);
      p1.translateY(-2);
      expect(p1.y).to.equal(3);
    });
    it('can translate a Point on x and y axis', function() {
      var p1 = Point(2, 5);
      p1.translate(4, -2);
      expect(p1.x).to.equal(6);
      expect(p1.y).to.equal(3);
    });
    it('can translate a Point with NaN coords', function() {
      var p1 = Point(2, undefined);
      p1.translate(4, -2);
      expect(p1.x).to.equal(6);
      expect(p1.y).to.deep.equal(NaN);
      var p2 = Point(undefined, 5);
      p2.translate(4, -2);
      expect(p2.y).to.equal(3);
      expect(p2.x).to.deep.equal(NaN);
    });
    it('accepts the same arguments in Point constructor and translate method', function() {
      expect(Point(0, 0).translate(10, 20).toString()).to.equal('10 20');
      expect(Point(0, 0).translate([10, 20]).toString()).to.equal('10 20');
      expect(Point(0, 0).translate({
        x: 10,
        y: 20
      }).toString()).to.equal('10 20');
      expect(Point(0, 0).translate(Point(10, 20)).toString()).to.equal('10 20');
    });
  });
  return {};
});

//# sourceMappingURL=data:application/json;base64,