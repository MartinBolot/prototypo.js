define(['./Classify.js'], function($__0) {
  "use strict";
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var Classify = $__0.default;
  describe('CLassify structure', function() {
    it('can be instanciated', function() {
      var c = new Classify({
        tags: ['foo', 'bar'],
        type: 'baz'
      });
      expect(c._tags).to.be.deep.equal(['foo', 'bar']);
      expect(c.type).to.be.equal('baz');
    });
    it('is possible to check if it has a particular tag', function() {
      var c = new Classify({
        tags: ['foo', 'bar'],
        type: 'baz'
      });
      expect(c.tags.has('foo')).to.be.true;
      expect(c.tags.has('bar')).to.be.true;
      expect(c.tags.has('baz')).to.be.false;
    });
    it('is possible to add one or more tags', function() {
      var c = new Classify();
      c.tags.add('foo');
      expect(c.tags.has('foo')).to.be.true;
      c.tags.add('bar', 'baz');
      expect(c.tags.has('foo')).to.be.true;
      expect(c.tags.has('bar')).to.be.true;
      expect(c.tags.has('baz')).to.be.true;
    });
  });
  return {};
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci82IiwiY2xhc3Nlcy9DbGFzc2lmeS5zcGVjLmpzIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzUiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNCIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8zIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEtBQUssQUFBQyxFQ0VlLGVBQWMsRUNGbkMsVUFBUyxJQUFnQjs7QUNBekIsS0FBSSxLQUFpQixHQUFLLEVBQUMsZUFBMkI7QUFDMUMsU0FBb0IsRUFBQyxPQUFNLE1BQW1CLENBQUMsQ0FBQTtBQUFBLElGQ3BELFNBQU87QUFFZCxTQUFPLEFBQUMsQ0FBQyxvQkFBbUIsQ0FBRyxVQUFRLEFBQUMsQ0FBRTtBQUV6QyxLQUFDLEFBQUMsQ0FBQyxxQkFBb0IsQ0FBRyxVQUFRLEFBQUMsQ0FBRTtBQUNwQyxBQUFJLFFBQUEsQ0FBQSxDQUFBLEVBQUksSUFBSSxTQUFPLEFBQUMsQ0FBQztBQUNwQixXQUFHLENBQUcsRUFBQyxLQUFJLENBQUcsTUFBSSxDQUFDO0FBQ25CLFdBQUcsQ0FBRyxNQUFJO0FBQUEsTUFDWCxDQUFDLENBQUM7QUFFRixXQUFLLEFBQUMsQ0FBQyxDQUFBLE1BQU0sQ0FBQyxHQUFHLEdBQUcsS0FBSyxNQUFNLEFBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBRyxNQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2hELFdBQUssQUFBQyxDQUFDLENBQUEsS0FBSyxDQUFDLEdBQUcsR0FBRyxNQUFNLEFBQUMsQ0FBQyxLQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDLENBQUM7QUFFRixLQUFDLEFBQUMsQ0FBQyxpREFBZ0QsQ0FBRyxVQUFRLEFBQUMsQ0FBRTtBQUNoRSxBQUFJLFFBQUEsQ0FBQSxDQUFBLEVBQUksSUFBSSxTQUFPLEFBQUMsQ0FBQztBQUNwQixXQUFHLENBQUcsRUFBQyxLQUFJLENBQUcsTUFBSSxDQUFDO0FBQ25CLFdBQUcsQ0FBRyxNQUFJO0FBQUEsTUFDWCxDQUFDLENBQUM7QUFFRixXQUFLLEFBQUMsQ0FBQyxDQUFBLEtBQUssSUFBSSxBQUFDLENBQUMsS0FBSSxDQUFDLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQztBQUNwQyxXQUFLLEFBQUMsQ0FBQyxDQUFBLEtBQUssSUFBSSxBQUFDLENBQUMsS0FBSSxDQUFDLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQztBQUNwQyxXQUFLLEFBQUMsQ0FBQyxDQUFBLEtBQUssSUFBSSxBQUFDLENBQUMsS0FBSSxDQUFDLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQztJQUN0QyxDQUFDLENBQUM7QUFFRixLQUFDLEFBQUMsQ0FBQyxxQ0FBb0MsQ0FBRyxVQUFRLEFBQUMsQ0FBRTtBQUNwRCxBQUFJLFFBQUEsQ0FBQSxDQUFBLEVBQUksSUFBSSxTQUFPLEFBQUMsRUFBQyxDQUFDO0FBRXRCLE1BQUEsS0FBSyxJQUFJLEFBQUMsQ0FBQyxLQUFJLENBQUMsQ0FBQztBQUVqQixXQUFLLEFBQUMsQ0FBQyxDQUFBLEtBQUssSUFBSSxBQUFDLENBQUMsS0FBSSxDQUFDLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQztBQUVwQyxNQUFBLEtBQUssSUFBSSxBQUFDLENBQUMsS0FBSSxDQUFHLE1BQUksQ0FBQyxDQUFDO0FBRXhCLFdBQUssQUFBQyxDQUFDLENBQUEsS0FBSyxJQUFJLEFBQUMsQ0FBQyxLQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ3BDLFdBQUssQUFBQyxDQUFDLENBQUEsS0FBSyxJQUFJLEFBQUMsQ0FBQyxLQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ3BDLFdBQUssQUFBQyxDQUFDLENBQUEsS0FBSyxJQUFJLEFBQUMsQ0FBQyxLQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO0lBQ3JDLENBQUMsQ0FBQztFQUNILENBQUMsQ0FBQztBR3hDRixXQUF1QjtBRkVuQixDRkZ1QyxDQUFDO0FDd0MxQyIsImZpbGUiOiJjbGFzc2VzL0NsYXNzaWZ5LnNwZWMuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoJF9fcGxhY2Vob2xkZXJfXzAsICRfX3BsYWNlaG9sZGVyX18xKTsiLCIvKmpzaGludCAtVzAzMCAqL1xuXG5pbXBvcnQgQ2xhc3NpZnkgZnJvbSAnLi9DbGFzc2lmeS5qcyc7XG5cbmRlc2NyaWJlKCdDTGFzc2lmeSBzdHJ1Y3R1cmUnLCBmdW5jdGlvbigpIHtcblxuXHRpdCgnY2FuIGJlIGluc3RhbmNpYXRlZCcsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjID0gbmV3IENsYXNzaWZ5KHtcblx0XHRcdHRhZ3M6IFsnZm9vJywgJ2JhciddLFxuXHRcdFx0dHlwZTogJ2Jheidcblx0XHR9KTtcblxuXHRcdGV4cGVjdChjLl90YWdzKS50by5iZS5kZWVwLmVxdWFsKFsnZm9vJywgJ2JhciddKTtcblx0XHRleHBlY3QoYy50eXBlKS50by5iZS5lcXVhbCgnYmF6Jyk7XG5cdH0pO1xuXG5cdGl0KCdpcyBwb3NzaWJsZSB0byBjaGVjayBpZiBpdCBoYXMgYSBwYXJ0aWN1bGFyIHRhZycsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjID0gbmV3IENsYXNzaWZ5KHtcblx0XHRcdHRhZ3M6IFsnZm9vJywgJ2JhciddLFxuXHRcdFx0dHlwZTogJ2Jheidcblx0XHR9KTtcblxuXHRcdGV4cGVjdChjLnRhZ3MuaGFzKCdmb28nKSkudG8uYmUudHJ1ZTtcblx0XHRleHBlY3QoYy50YWdzLmhhcygnYmFyJykpLnRvLmJlLnRydWU7XG5cdFx0ZXhwZWN0KGMudGFncy5oYXMoJ2JheicpKS50by5iZS5mYWxzZTtcblx0fSk7XG5cblx0aXQoJ2lzIHBvc3NpYmxlIHRvIGFkZCBvbmUgb3IgbW9yZSB0YWdzJywgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGMgPSBuZXcgQ2xhc3NpZnkoKTtcblxuXHRcdGMudGFncy5hZGQoJ2ZvbycpO1xuXG5cdFx0ZXhwZWN0KGMudGFncy5oYXMoJ2ZvbycpKS50by5iZS50cnVlO1xuXG5cdFx0Yy50YWdzLmFkZCgnYmFyJywgJ2JheicpO1xuXG5cdFx0ZXhwZWN0KGMudGFncy5oYXMoJ2ZvbycpKS50by5iZS50cnVlO1xuXHRcdGV4cGVjdChjLnRhZ3MuaGFzKCdiYXInKSkudG8uYmUudHJ1ZTtcblx0XHRleHBlY3QoYy50YWdzLmhhcygnYmF6JykpLnRvLmJlLnRydWU7XG5cdH0pO1xufSk7IiwiZnVuY3Rpb24oJF9fcGxhY2Vob2xkZXJfXzApIHtcbiAgICAgICRfX3BsYWNlaG9sZGVyX18xXG4gICAgfSIsImlmICghJF9fcGxhY2Vob2xkZXJfXzAgfHwgISRfX3BsYWNlaG9sZGVyX18xLl9fZXNNb2R1bGUpXG4gICAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMiA9IHtkZWZhdWx0OiAkX19wbGFjZWhvbGRlcl9fM30iLCJyZXR1cm4gJF9fcGxhY2Vob2xkZXJfXzAiXX0=