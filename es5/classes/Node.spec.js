define(['./Node.js'], function($__0) {
  "use strict";
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var Node = $__0.default;
  describe('Node structure', function() {
    it('can be instanciated', function() {
      var n = new Node({
        x: 12,
        y: 34,
        rCtrl: [45, 56],
        lCtrl: {
          x: 67,
          y: 78
        }
      });
      expect(n.constructor).to.be.equal(Node);
      expect(n.x).to.be.equal(12);
      expect(n.y).to.be.equal(34);
      expect(n.rCtrl.x).to.be.equal(45);
      expect(n.rCtrl.y).to.be.equal(56);
      expect(n.lCtrl.x).to.be.equal(67);
      expect(n.lCtrl.y).to.be.equal(78);
    });
    it('can update itself using parameters only', function() {
      var n = new Node({src: {x: {
            updater: function(contours, anchors, nodes, thickness, contrast) {
              return thickness * contrast;
            },
            parameters: ['thickness', 'contrast']
          }}});
      n.update({
        thickness: 2,
        contrast: 3
      });
      expect(n.x).to.be.equal(6);
    });
    it('can update itself using parameters and other predefined nodes', function() {
      var n = new Node({src: {x: {
            updater: function(contours, anchors, nodes, thickness, contrast) {
              return thickness + nodes[0].x;
            },
            parameters: ['thickness', 'contrast']
          }}});
      n.update({thickness: 2}, [], [], [{x: 6}]);
      expect(n.x).to.be.equal(8);
    });
    it('can update itself using the onLine param', function() {
      var n = new Node({
        x: 15,
        src: {
          x: {},
          onLine: [{operation: 'nodes[0]'}, {operation: 'nodes[1]'}]
        }
      });
      n.update({thickness: 2}, [], [], [{
        x: 10,
        y: 10
      }, {
        x: 20,
        y: 20
      }]);
      expect(n.y).to.be.equal(15);
    });
  });
  return {};
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci82IiwiY2xhc3Nlcy9Ob2RlLnNwZWMuanMiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNSIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci80IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsS0FBSyxBQUFDLEVDRVcsV0FBVSxFQ0YzQixVQUFTLElBQWdCOztBQ0F6QixLQUFJLEtBQWlCLEdBQUssRUFBQyxlQUEyQjtBQUMxQyxTQUFvQixFQUFDLE9BQU0sTUFBbUIsQ0FBQyxDQUFBO0FBQUEsSUZDcEQsS0FBRztBQUVWLFNBQU8sQUFBQyxDQUFDLGdCQUFlLENBQUcsVUFBUSxBQUFDLENBQUU7QUFFckMsS0FBQyxBQUFDLENBQUMscUJBQW9CLENBQUcsVUFBUSxBQUFDLENBQUU7QUFDcEMsQUFBSSxRQUFBLENBQUEsQ0FBQSxFQUFJLElBQUksS0FBRyxBQUFDLENBQUM7QUFDaEIsUUFBQSxDQUFHLEdBQUM7QUFDSixRQUFBLENBQUcsR0FBQztBQUNKLFlBQUksQ0FBRyxFQUFDLEVBQUMsQ0FBRyxHQUFDLENBQUM7QUFDZCxZQUFJLENBQUc7QUFBQyxVQUFBLENBQUcsR0FBQztBQUFHLFVBQUEsQ0FBRyxHQUFDO0FBQUEsUUFBQztBQUFBLE1BQ3JCLENBQUMsQ0FBQztBQUVGLFdBQUssQUFBQyxDQUFDLENBQUEsWUFBWSxDQUFDLEdBQUcsR0FBRyxNQUFNLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztBQUN2QyxXQUFLLEFBQUMsQ0FBQyxDQUFBLEVBQUUsQ0FBQyxHQUFHLEdBQUcsTUFBTSxBQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7QUFDM0IsV0FBSyxBQUFDLENBQUMsQ0FBQSxFQUFFLENBQUMsR0FBRyxHQUFHLE1BQU0sQUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0FBQzNCLFdB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O0FBQUEsTUFBRSxDQUNmO0FBQUUsUUFBQSxDQUFHLEdBQUM7QUFBRyxRQUFBLENBQUcsR0FBQztBQUFBLE1BQUUsQ0FDaEIsQ0FBQyxDQUFDO0FBRUYsV0FBSyxBQUFDLENBQUMsQ0FBQSxFQUFFLENBQUMsR0FBRyxHQUFHLE1BQU0sQUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQzVCLENBQUMsQ0FBQztFQUNILENBQUMsQ0FBQztBR3JGRixXQUF1QjtBRkVuQixDRkZ1QyxDQUFDO0FDcUYxQyIsImZpbGUiOiJjbGFzc2VzL05vZGUuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSgkX19wbGFjZWhvbGRlcl9fMCwgJF9fcGxhY2Vob2xkZXJfXzEpOyIsIi8qanNoaW50IC1XMDMwICovXG5cbmltcG9ydCBOb2RlIGZyb20gJy4vTm9kZS5qcyc7XG5cbmRlc2NyaWJlKCdOb2RlIHN0cnVjdHVyZScsIGZ1bmN0aW9uKCkge1xuXG5cdGl0KCdjYW4gYmUgaW5zdGFuY2lhdGVkJywgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG4gPSBuZXcgTm9kZSh7XG5cdFx0XHR4OiAxMixcblx0XHRcdHk6IDM0LFxuXHRcdFx0ckN0cmw6IFs0NSwgNTZdLFxuXHRcdFx0bEN0cmw6IHt4OiA2NywgeTogNzh9XG5cdFx0fSk7XG5cblx0XHRleHBlY3Qobi5jb25zdHJ1Y3RvcikudG8uYmUuZXF1YWwoTm9kZSk7XG5cdFx0ZXhwZWN0KG4ueCkudG8uYmUuZXF1YWwoMTIpO1xuXHRcdGV4cGVjdChuLnkpLnRvLmJlLmVxdWFsKDM0KTtcblx0XHRleHBlY3Qobi5yQ3RybC54KS50by5iZS5lcXVhbCg0NSk7XG5cdFx0ZXhwZWN0KG4uckN0cmwueSkudG8uYmUuZXF1YWwoNTYpO1xuXHRcdGV4cGVjdChuLmxDdHJsLngpLnRvLmJlLmVxdWFsKDY3KTtcblx0XHRleHBlY3Qobi5sQ3RybC55KS50by5iZS5lcXVhbCg3OCk7XG5cdH0pO1xuXG5cdGl0KCdjYW4gdXBkYXRlIGl0c2VsZiB1c2luZyBwYXJhbWV0ZXJzIG9ubHknLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbiA9IG5ldyBOb2RlKHtcblx0XHRcdHNyYzoge1xuXHRcdFx0XHR4OiB7XG5cdFx0XHRcdFx0dXBkYXRlcjogZnVuY3Rpb24oIGNvbnRvdXJzLCBhbmNob3JzLCBub2RlcywgdGhpY2tuZXNzLCBjb250cmFzdCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlja25lc3MgKiBjb250cmFzdDtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHBhcmFtZXRlcnM6IFsndGhpY2tuZXNzJywgJ2NvbnRyYXN0J11cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0bi51cGRhdGUoe1xuXHRcdFx0dGhpY2tuZXNzOiAyLFxuXHRcdFx0Y29udHJhc3Q6IDNcblx0XHR9KTtcblxuXHRcdGV4cGVjdChuLngpLnRvLmJlLmVxdWFsKDYpO1xuXHR9KTtcblxuXHRpdCgnY2FuIHVwZGF0ZSBpdHNlbGYgdXNpbmcgcGFyYW1ldGVycyBhbmQgb3RoZXIgcHJlZGVmaW5lZCBub2RlcycsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuID0gbmV3IE5vZGUoe1xuXHRcdFx0c3JjOiB7XG5cdFx0XHRcdHg6IHtcblx0XHRcdFx0XHR1cGRhdGVyOiBmdW5jdGlvbiggY29udG91cnMsIGFuY2hvcnMsIG5vZGVzLCB0aGlja25lc3MsIGNvbnRyYXN0ICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaWNrbmVzcyArIG5vZGVzWzBdLng7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRwYXJhbWV0ZXJzOiBbJ3RoaWNrbmVzcycsICdjb250cmFzdCddXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdG4udXBkYXRlKHtcblx0XHRcdHRoaWNrbmVzczogMlxuXHRcdH0sIFtdLCBbXSwgW1xuXHRcdFx0e8KgeDogNiB9XG5cdFx0XSk7XG5cblx0XHRleHBlY3Qobi54KS50by5iZS5lcXVhbCg4KTtcblx0fSk7XG5cblx0aXQoJ2NhbiB1cGRhdGUgaXRzZWxmIHVzaW5nIHRoZSBvbkxpbmUgcGFyYW0nLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbiA9IG5ldyBOb2RlKHtcblx0XHRcdHg6IDE1LFxuXHRcdFx0c3JjOiB7XG5cdFx0XHRcdHg6IHt9LFxuXHRcdFx0XHRvbkxpbmU6IFtcblx0XHRcdFx0XHR7b3BlcmF0aW9uOiAnbm9kZXNbMF0nfSxcblx0XHRcdFx0XHR7b3BlcmF0aW9uOiAnbm9kZXNbMV0nfVxuXHRcdFx0XHRdXG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRuLnVwZGF0ZSh7XG5cdFx0XHR0aGlja25lc3M6IDJcblx0XHR9LCBbXSwgW10sIFtcblx0XHRcdHvCoHg6IDEwLCB5OiAxMCB9LFxuXHRcdFx0eyB4OiAyMCwgeTogMjAgfVxuXHRcdF0pO1xuXG5cdFx0ZXhwZWN0KG4ueSkudG8uYmUuZXF1YWwoMTUpO1xuXHR9KTtcbn0pOyIsImZ1bmN0aW9uKCRfX3BsYWNlaG9sZGVyX18wKSB7XG4gICAgICAkX19wbGFjZWhvbGRlcl9fMVxuICAgIH0iLCJpZiAoISRfX3BsYWNlaG9sZGVyX18wIHx8ICEkX19wbGFjZWhvbGRlcl9fMS5fX2VzTW9kdWxlKVxuICAgICAgICAgICAgJF9fcGxhY2Vob2xkZXJfXzIgPSB7ZGVmYXVsdDogJF9fcGxhY2Vob2xkZXJfXzN9IiwicmV0dXJuICRfX3BsYWNlaG9sZGVyX18wIl19