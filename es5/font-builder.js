define(['./classes/Font.js', './classes/Glyph.js'], function($__0,$__2) {
  "use strict";
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__2 || !$__2.__esModule)
    $__2 = {default: $__2};
  var Font = $__0.default;
  var Glyph = $__2.default;
  function builder(src) {
    var font = new Font(),
        name,
        glyphSrc,
        glyph;
    for (name in src.glyphs) {
      glyphSrc = src.glyphs[name];
      glyph = font.addGlyph(name, glyphSrc);
      glyphSrc.anchor && glyphSrc.anchor.forEach((function(anchorSrc) {
        createUpdaters(pointSrc);
        glyph.addAnchor({src: anchorSrc});
      }));
      glyphSrc.outline && glyphSrc.outline.contour && glyphSrc.outline.contour.forEach((function(contourSrc) {
        var contour = glyph.addContour(contourSrc);
        contourSrc.point.forEach((function(pointSrc) {
          createUpdaters(pointSrc);
          contour.addNode(pointSrc);
        }));
      }));
    }
    return font;
  }
  function createUpdaters(branch) {
    if (branch.constructor === Object && typeof branch.operation === 'string') {
      var args = ['coutours', 'anchors', 'nodes'].concat(branch.parameters).concat('return ' + branch.operation);
      return branch.updater = Function.apply(null, args);
    }
    if (branch.constructor === Object) {
      for (var i in branch) {
        createUpdaters(branch[i]);
      }
    }
    if (branch.constructor === Array) {
      branch.forEach((function(subBranch) {
        return createUpdaters(subBranch);
      }));
    }
  }
  var $__default = {
    build: builder,
    updater: createUpdaters
  };
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci82IiwiZm9udC1idWlsZGVyLmpzIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzUiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNCIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8wIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzMiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMSIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8yIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEtBQUssQUFBQyxFQ0FXLG1CQUFrQixDQUNqQixxQkFBbUIsRUNEckMsVUFBUyxTQUFnQjs7QUNBekIsS0FBSSxLQUFpQixHQUFLLEVBQUMsZUFBMkI7QUFDMUMsU0FBb0IsRUFBQyxPQUFNLE1BQW1CLENBQUMsQ0FBQTtBQUQzRCxBQUMyRCxLQUR2RCxLQUFpQixHQUFLLEVBQUMsZUFBMkI7QUFDMUMsU0FBb0IsRUFBQyxPQUFNLE1BQW1CLENBQUMsQ0FBQTtBQUFBLElGRHBELEtBQUc7SUFDSCxNQUFJO0FBRVgsU0FBUyxRQUFNLENBQUcsR0FBRTtBQUNuQixBQUFJLE1BQUEsQ0FBQSxJQUFHLEVBQUksSUFBSSxLQUFHLEFBQUMsRUFBQztBQUNuQixXQUFHO0FBQ0gsZUFBTztBQUNQLFlBQUksQ0FBQztBQUVOLFFBQU0sSUFBRyxHQUFLLENBQUEsR0FBRSxPQUFPLENBQUk7QUFDMUIsYUFBTyxFQUFJLENBQUEsR0FBRSxPQUFPLENBQUUsSUFBRyxDQUFDLENBQUM7QUFFM0IsVUFBSSxFQUFJLENBQUEsSUFBRyxTQUFTLEFBQUMsQ0FBRSxJQUFHLENBQUcsU0FBTyxDQUFFLENBQUM7QUFFdkMsYUFBTyxPQUFPLEdBQ2QsQ0FBQSxRQUFPLE9BQU8sUUFBUSxBQUFDLEVBQUMsU0FBQSxTQUFRLENBQUs7QUFDcEMscUJBQWEsQUFBQyxDQUFFLFFBQU8sQ0FBRSxDQUFDO0FBRTFCLFlBQUksVUFBVSxBQUFDLENBQUMsQ0FBRSxHQUFFLENBQUcsVUFBUSxDQUFFLENBQUMsQ0FBQztNQUNwQyxFQUFDLENBQUM7QUFFRixhQUFPLFFBQVEsR0FDZixDQUFBLFFBQU8sUUFBUSxRQUFRLENBQUEsRUFDdkIsQ0FBQSxRQUFPLFFBQVEsUUFBUSxRQUFRLEFBQUMsRUFBQyxTQUFBLFVBQVM7QUFDekMsQUFBSSxVQUFBLENBQUEsT0FBTSxFQUFJLENBQUEsS0FBSSxXQUFXLEFBQUMsQ0FBRSxVQUFTLENBQUUsQ0FBQztBQUU1QyxpQkFBUyxNQUFNLFFBQVEsQUFBQyxFQUFDLFNBQUEsUUFBTyxDQUFLO0FBQ3BDLHVCQUFhLEFBQUMsQ0FBRSxRQUFPLENBQUUsQ0FBQztBQUUxQixnQkFBTSxRQUFRLEFBQUMsQ0FBRSxRQUFPLENBQUUsQ0FBQztRQUM1QixFQUFDLENBQUM7TUFDSCxFQUFDLENBQUM7SUFDSDtBQUFBLEFBRUEsU0FBTyxLQUFHLENBQUM7RUFDWjtBQUVBLFNBQVMsZUFBYSxDQUFHLE1BQUs7QUFDN0IsT0FBSyxNQUFLLFlBQVksSUFBTSxPQUFLLENBQUEsRUFBSyxDQUFBLE1BQU8sT0FBSyxVQUFVLENBQUEsR0FBTSxTQUFPLENBQUk7QUFDNUUsQUFBSSxRQUFBLENBQUEsSUFBRyxFQUFJLENBQUEsQ0FBQyxVQUFTLENBQUcsVUFBUSxDQUFHLFFBQU0sQ0FBQyxPQUNsQyxBQUFDLENBQUUsTUFBSyxXQUFXLENBQUUsT0FDckIsQUFBQyxDQUFFLFNBQVEsRUFBSSxDQUFBLE1BQUssVUFBVSxDQUFFLENBQUM7QUFFekMsV0FBTyxDQUFBLE1BQUssUUFBUSxFQUFJLENBQUEsUUFBTyxNQUFNLEFBQUMsQ0FBRSxJQUFHLENBQUcsS0FBRyxDQUFFLENBQUM7SUFDckQ7QUFBQSxBQUVBLE9BQUssTUFBSyxZQUFZLElBQU0sT0FBSyxDQUFJO0FBQ3BDLFVBQVUsR0FBQSxDQUFBLENBQUEsQ0FBQSxFQUFLLE9BQUssQ0FBSTtBQUN2QixxQkFBYSxBQUFDLENBQUUsTUFBSyxDQUFFLENBQUEsQ0FBQyxDQUFFLENBQUM7TUFDNUI7QUFBQSxJQUNEO0FBQUEsQUFFQSxPQUFLLE1BQUssWUFBWSxJQUFNLE1BQUksQ0FBSTtBQUNuQyxXQUFLLFFBQVEsQUFBQyxFQUFDLFNBQUEsU0FBUTthQUFLLENBQUEsY0FBYSxBQUFDLENBQUUsU0FBUSxDQUFFO01BQUEsRUFBQyxDQUFDO0lBQ3pEO0FBQUEsRUFDRDtBR3ZEQSxBQUFJLElBQUEsQ0FBQSxVQUFTLEVIeURFO0FBQ2QsUUFBSSxDQUFHLFFBQU07QUFDYixVQUFNLENBQUcsZUFBYTtBQUFBLEVHM0RVLEFINERqQyxDRzVEaUM7QUNBakM7QUNBQSxnQkFBd0I7QUFBRSx1QkFBd0I7SUFBRTtBQ0FwRCxhQUFTLENBQUcsS0FBRztBQUFBLEdGQVE7QUhFbkIsQ0ZGdUMsQ0FBQztBQzREM0MiLCJmaWxlIjoiZm9udC1idWlsZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCRfX3BsYWNlaG9sZGVyX18wLCAkX19wbGFjZWhvbGRlcl9fMSk7IiwiaW1wb3J0IEZvbnQgZnJvbSAnLi9jbGFzc2VzL0ZvbnQuanMnO1xuaW1wb3J0IEdseXBoIGZyb20gJy4vY2xhc3Nlcy9HbHlwaC5qcyc7XG5cbmZ1bmN0aW9uIGJ1aWxkZXIoIHNyYyApIHtcblx0dmFyIGZvbnQgPSBuZXcgRm9udCgpLFxuXHRcdG5hbWUsXG5cdFx0Z2x5cGhTcmMsXG5cdFx0Z2x5cGg7XG5cblx0Zm9yICggbmFtZSBpbiBzcmMuZ2x5cGhzICkge1xuXHRcdGdseXBoU3JjID0gc3JjLmdseXBoc1tuYW1lXTtcblxuXHRcdGdseXBoID0gZm9udC5hZGRHbHlwaCggbmFtZSwgZ2x5cGhTcmMgKTtcblxuXHRcdGdseXBoU3JjLmFuY2hvciAmJlxuXHRcdGdseXBoU3JjLmFuY2hvci5mb3JFYWNoKGFuY2hvclNyYyA9PiB7XG5cdFx0XHRjcmVhdGVVcGRhdGVycyggcG9pbnRTcmMgKTtcblxuXHRcdFx0Z2x5cGguYWRkQW5jaG9yKHsgc3JjOiBhbmNob3JTcmMgfSk7XG5cdFx0fSk7XG5cblx0XHRnbHlwaFNyYy5vdXRsaW5lICYmXG5cdFx0Z2x5cGhTcmMub3V0bGluZS5jb250b3VyICYmXG5cdFx0Z2x5cGhTcmMub3V0bGluZS5jb250b3VyLmZvckVhY2goY29udG91clNyYyA9PiB7XG5cdFx0XHR2YXIgY29udG91ciA9IGdseXBoLmFkZENvbnRvdXIoIGNvbnRvdXJTcmMgKTtcblxuXHRcdFx0Y29udG91clNyYy5wb2ludC5mb3JFYWNoKHBvaW50U3JjID0+IHtcblx0XHRcdFx0Y3JlYXRlVXBkYXRlcnMoIHBvaW50U3JjICk7XG5cblx0XHRcdFx0Y29udG91ci5hZGROb2RlKCBwb2ludFNyYyApO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4gZm9udDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVXBkYXRlcnMoIGJyYW5jaCApIHtcblx0aWYgKCBicmFuY2guY29uc3RydWN0b3IgPT09IE9iamVjdCAmJiB0eXBlb2YgYnJhbmNoLm9wZXJhdGlvbiA9PT0gJ3N0cmluZycgKSB7XG5cdFx0dmFyIGFyZ3MgPSBbJ2NvdXRvdXJzJywgJ2FuY2hvcnMnLCAnbm9kZXMnXVxuXHRcdFx0XHQuY29uY2F0KCBicmFuY2gucGFyYW1ldGVycyApXG5cdFx0XHRcdC5jb25jYXQoICdyZXR1cm4gJyArIGJyYW5jaC5vcGVyYXRpb24gKTtcblxuXHRcdHJldHVybiBicmFuY2gudXBkYXRlciA9IEZ1bmN0aW9uLmFwcGx5KCBudWxsLCBhcmdzICk7XG5cdH1cblxuXHRpZiAoIGJyYW5jaC5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0ICkge1xuXHRcdGZvciAoIHZhciBpIGluIGJyYW5jaCApIHtcblx0XHRcdGNyZWF0ZVVwZGF0ZXJzKCBicmFuY2hbaV0gKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoIGJyYW5jaC5jb25zdHJ1Y3RvciA9PT0gQXJyYXkgKSB7XG5cdFx0YnJhbmNoLmZvckVhY2goc3ViQnJhbmNoID0+IGNyZWF0ZVVwZGF0ZXJzKCBzdWJCcmFuY2ggKSk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuXHRidWlsZDogYnVpbGRlcixcblx0dXBkYXRlcjogY3JlYXRlVXBkYXRlcnNcbn07IiwiZnVuY3Rpb24oJF9fcGxhY2Vob2xkZXJfXzApIHtcbiAgICAgICRfX3BsYWNlaG9sZGVyX18xXG4gICAgfSIsImlmICghJF9fcGxhY2Vob2xkZXJfXzAgfHwgISRfX3BsYWNlaG9sZGVyX18xLl9fZXNNb2R1bGUpXG4gICAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMiA9IHtkZWZhdWx0OiAkX19wbGFjZWhvbGRlcl9fM30iLCJ2YXIgJF9fZGVmYXVsdCA9ICRfX3BsYWNlaG9sZGVyX18wIiwicmV0dXJuICRfX3BsYWNlaG9sZGVyX18wIiwiZ2V0ICRfX3BsYWNlaG9sZGVyX18wKCkgeyByZXR1cm4gJF9fcGxhY2Vob2xkZXJfXzE7IH0iLCJfX2VzTW9kdWxlOiB0cnVlIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9