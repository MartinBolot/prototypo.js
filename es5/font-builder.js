define(['./classes/Font.js'], function($__0) {
  "use strict";
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var Font = $__0.default;
  function createUpdaters(branch) {
    if (branch.constructor === Object && typeof branch.operation === 'string') {
      var args = ['coutours', 'anchors', 'nodes'].concat(branch.parameters).concat('return ' + branch.operation);
      return (branch.updater = Function.apply(null, args));
    }
    if (branch.constructor === Object) {
      for (var i in branch) {
        createUpdaters(branch[i]);
      }
    }
    if (branch.constructor === Array) {
      branch.forEach((function(subBranch) {
        return createUpdaters(subBranch);
      }));
    }
  }
  function classify(obj, src) {
    if (src.type) {
      obj.type = src.type;
    }
    if (src.tags) {
      obj._tags = typeof src.tags === 'string' ? src.tags.split(' ') : src.tags;
    }
  }
  function builder(src) {
    var font = new Font(),
        name,
        glyphSrc,
        glyph;
    for (name in src.glyphs) {
      glyphSrc = src.glyphs[name];
      glyph = font.addGlyph(name, glyphSrc);
      classify(glyph, glyphSrc);
      glyphSrc.anchor && glyphSrc.anchor.forEach((function(anchorSrc) {
        createUpdaters(anchorSrc);
        var anchor = glyph.addAnchor({src: anchorSrc});
        classify(anchor, anchorSrc);
      }));
      glyphSrc.outline && glyphSrc.outline.contour && glyphSrc.outline.contour.forEach((function(contourSrc) {
        var contour = glyph.addContour({src: contourSrc});
        classify(contour, contourSrc);
        contourSrc.point.forEach((function(pointSrc) {
          createUpdaters({src: pointSrc});
          var node = contour.addNode({src: pointSrc});
          classify(node, pointSrc);
        }));
      }));
    }
    return font;
  }
  var $__default = {
    classify: classify,
    build: builder,
    updater: createUpdaters
  };
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci82IiwiZm9udC1idWlsZGVyLmpzIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzUiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNCIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8wIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzMiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMSIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8yIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEtBQUssQUFBQyxFQ0lXLG1CQUFrQixFQ0puQyxVQUFTLElBQWdCOztBQ0F6QixLQUFJLEtBQWlCLEdBQUssRUFBQyxlQUEyQjtBQUMxQyxTQUFvQixFQUFDLE9BQU0sTUFBbUIsQ0FBQyxDQUFBO0FBQUEsSUZHcEQsS0FBRztBQUdWLFNBQVMsZUFBYSxDQUFHLE1BQUs7QUFDN0IsT0FBSyxNQUFLLFlBQVksSUFBTSxPQUFLLENBQUEsRUFBSyxDQUFBLE1BQU8sT0FBSyxVQUFVLENBQUEsR0FBTSxTQUFPLENBQUk7QUFDNUUsQUFBSSxRQUFBLENBQUEsSUFBRyxFQUFJLENBQUEsQ0FBQyxVQUFTLENBQUcsVUFBUSxDQUFHLFFBQU0sQ0FBQyxPQUNsQyxBQUFDLENBQUUsTUFBSyxXQUFXLENBQUUsT0FDckIsQUFBQyxDQUFFLFNBQVEsRUFBSSxDQUFBLE1BQUssVUFBVSxDQUFFLENBQUM7QUFFekMsV0FBTyxFQUFFLE1BQUssUUFBUSxFQUFJLENBQUEsUUFBTyxNQUFNLEFBQUMsQ0FBRSxJQUFHLENBQUcsS0FBRyxDQUFFLENBQUUsQ0FBQztJQUN6RDtBQUFBLEFBRUEsT0FBSyxNQUFLLFlBQVksSUFBTSxPQUFLLENBQUk7QUFDcEMsVUFBVSxHQUFBLENBQUEsQ0FBQSxDQUFBLEVBQUssT0FBSyxDQUFJ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O0FBQUEsR0ZBUTtBSEVuQixDRkZ1QyxDQUFDO0FDa0YzQyIsImZpbGUiOiJmb250LWJ1aWxkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoJF9fcGxhY2Vob2xkZXJfXzAsICRfX3BsYWNlaG9sZGVyX18xKTsiLCIvLyBUT0RPOiB3aXRob3V0IHRoaXMgZmxhZywgaXQgc2VlbXMgdGhhdCBqc2hpbnQgZG9lc24ndCBsaWtlIGFycm93IGZ1bmN0aW9ucy5cbi8vIEZpbmQgb3V0IHdoYXQgdGhlIHJlYWwgcHJvYmxlbSBpc1xuLypqc2hpbnQgLVcwMzAgKi9cblxuaW1wb3J0IEZvbnQgZnJvbSAnLi9jbGFzc2VzL0ZvbnQuanMnO1xuLy8gaW1wb3J0IEdseXBoIGZyb20gJy4vY2xhc3Nlcy9HbHlwaC5qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVVwZGF0ZXJzKCBicmFuY2ggKSB7XG5cdGlmICggYnJhbmNoLmNvbnN0cnVjdG9yID09PSBPYmplY3QgJiYgdHlwZW9mIGJyYW5jaC5vcGVyYXRpb24gPT09ICdzdHJpbmcnICkge1xuXHRcdHZhciBhcmdzID0gWydjb3V0b3VycycsICdhbmNob3JzJywgJ25vZGVzJ11cblx0XHRcdFx0LmNvbmNhdCggYnJhbmNoLnBhcmFtZXRlcnMgKVxuXHRcdFx0XHQuY29uY2F0KCAncmV0dXJuICcgKyBicmFuY2gub3BlcmF0aW9uICk7XG5cblx0XHRyZXR1cm4gKCBicmFuY2gudXBkYXRlciA9IEZ1bmN0aW9uLmFwcGx5KCBudWxsLCBhcmdzICkgKTtcblx0fVxuXG5cdGlmICggYnJhbmNoLmNvbnN0cnVjdG9yID09PSBPYmplY3QgKSB7XG5cdFx0Zm9yICggdmFyIGkgaW4gYnJhbmNoICkge1xuXHRcdFx0Y3JlYXRlVXBkYXRlcnMoIGJyYW5jaFtpXSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggYnJhbmNoLmNvbnN0cnVjdG9yID09PSBBcnJheSApIHtcblx0XHRicmFuY2guZm9yRWFjaChzdWJCcmFuY2ggPT4gY3JlYXRlVXBkYXRlcnMoIHN1YkJyYW5jaCApKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjbGFzc2lmeSggb2JqLCBzcmMgKSB7XG5cdGlmICggc3JjLnR5cGUgKSB7XG5cdFx0b2JqLnR5cGUgPSBzcmMudHlwZTtcblx0fVxuXHRpZiAoIHNyYy50YWdzICkge1xuXHRcdG9iai5fdGFncyA9IHR5cGVvZiBzcmMudGFncyA9PT0gJ3N0cmluZycgP1xuXHRcdFx0c3JjLnRhZ3Muc3BsaXQoJyAnKTpcblx0XHRcdHNyYy50YWdzO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGJ1aWxkZXIoIHNyYyApIHtcblx0dmFyIGZvbnQgPSBuZXcgRm9udCgpLFxuXHRcdG5hbWUsXG5cdFx0Z2x5cGhTcmMsXG5cdFx0Z2x5cGg7XG5cblx0Zm9yICggbmFtZSBpbiBzcmMuZ2x5cGhzICkge1xuXHRcdGdseXBoU3JjID0gc3JjLmdseXBoc1tuYW1lXTtcblxuXHRcdGdseXBoID0gZm9udC5hZGRHbHlwaCggbmFtZSwgZ2x5cGhTcmMgKTtcblx0XHRjbGFzc2lmeSggZ2x5cGgsIGdseXBoU3JjICk7XG5cblx0XHRnbHlwaFNyYy5hbmNob3IgJiZcblx0XHRnbHlwaFNyYy5hbmNob3IuZm9yRWFjaChhbmNob3JTcmMgPT4ge1xuXHRcdFx0Y3JlYXRlVXBkYXRlcnMoIGFuY2hvclNyYyApO1xuXG5cdFx0XHR2YXIgYW5jaG9yID0gZ2x5cGguYWRkQW5jaG9yKHsgc3JjOiBhbmNob3JTcmMgfSk7XG5cdFx0XHRjbGFzc2lmeSggYW5jaG9yLCBhbmNob3JTcmMgKTtcblx0XHR9KTtcblxuXHRcdGdseXBoU3JjLm91dGxpbmUgJiZcblx0XHRnbHlwaFNyYy5vdXRsaW5lLmNvbnRvdXIgJiZcblx0XHRnbHlwaFNyYy5vdXRsaW5lLmNvbnRvdXIuZm9yRWFjaChjb250b3VyU3JjID0+IHtcblx0XHRcdHZhciBjb250b3VyID0gZ2x5cGguYWRkQ29udG91cih7IHNyYzogY29udG91clNyYyB9KTtcblx0XHRcdGNsYXNzaWZ5KCBjb250b3VyLCBjb250b3VyU3JjICk7XG5cblx0XHRcdGNvbnRvdXJTcmMucG9pbnQuZm9yRWFjaChwb2ludFNyYyA9PiB7XG5cdFx0XHRcdGNyZWF0ZVVwZGF0ZXJzKHsgc3JjOiBwb2ludFNyYyB9KTtcblxuXHRcdFx0XHR2YXIgbm9kZSA9IGNvbnRvdXIuYWRkTm9kZSh7IHNyYzogcG9pbnRTcmMgfSk7XG5cdFx0XHRcdGNsYXNzaWZ5KCBub2RlLCBwb2ludFNyYyApO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIFRPRE86IGNoZWNrIGlmIGNvdW50b3VyIGlzIG9wZW4gb3IgY2xvc2VkXG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4gZm9udDtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuXHRjbGFzc2lmeTogY2xhc3NpZnksXG5cdGJ1aWxkOiBidWlsZGVyLFxuXHR1cGRhdGVyOiBjcmVhdGVVcGRhdGVyc1xufTsiLCJmdW5jdGlvbigkX19wbGFjZWhvbGRlcl9fMCkge1xuICAgICAgJF9fcGxhY2Vob2xkZXJfXzFcbiAgICB9IiwiaWYgKCEkX19wbGFjZWhvbGRlcl9fMCB8fCAhJF9fcGxhY2Vob2xkZXJfXzEuX19lc01vZHVsZSlcbiAgICAgICAgICAgICRfX3BsYWNlaG9sZGVyX18yID0ge2RlZmF1bHQ6ICRfX3BsYWNlaG9sZGVyX18zfSIsInZhciAkX19kZWZhdWx0ID0gJF9fcGxhY2Vob2xkZXJfXzAiLCJyZXR1cm4gJF9fcGxhY2Vob2xkZXJfXzAiLCJnZXQgJF9fcGxhY2Vob2xkZXJfXzAoKSB7IHJldHVybiAkX19wbGFjZWhvbGRlcl9fMTsgfSIsIl9fZXNNb2R1bGU6IHRydWUiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=